<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tolik Code</title>
    <link>http://tolikcode.github.io/</link>
    <description>Recent content on Tolik Code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Apr 2016 17:49:51 +0300</lastBuildDate>
    <atom:link href="http://tolikcode.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Yet another money manager</title>
      <link>http://tolikcode.github.io/post/moneyman/</link>
      <pubDate>Tue, 05 Apr 2016 17:49:51 +0300</pubDate>
      
      <guid>http://tolikcode.github.io/post/moneyman/</guid>
      <description>

&lt;p&gt;I got a little bored and decided to do some web development. I did several ASP.NET Web Forms projects back in university days and this is as far as my web development experience goes. I needed a project that would be at least of some use for me and give me enough drive to finish it.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m trying to control how much money I spend and I need a solution to help me with this. There are plenty of expense managers already, but all of them never quite meet everyone&amp;rsquo;s exact dreams and wants as everyone handles it a little differently. They are also either not free, or with ads, or provide no cloud synchronization.&lt;/p&gt;

&lt;h2 id=&#34;project-description:7cced0d4ebc37f80338282bff66da165&#34;&gt;Project description&lt;/h2&gt;

&lt;p&gt;The goal of this project is to help you track your expenses and incomes. I want to keep it as simple as possible. I&amp;rsquo;d like to have a handy way to note my expenses anywhere I go with my phone and to have it all aggregated in a convenient form on my PC later.
The core of this solution is ASP.NET MVC application and a Web API for synchronization with an Android client. Android app is still in development.&lt;/p&gt;

&lt;p&gt;Web application screenshot is here just to get your attention (Disclaimer: I&amp;rsquo;m not a designer).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;standardBorder&#34; markdown=&#34;1&#34;&gt;
    &lt;img src=&#34;http://tolikcode.github.io/images/moneyManScreen.PNG&#34;&gt;
&lt;/div&gt;
&lt;p/&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-can-it-interest-you:7cced0d4ebc37f80338282bff66da165&#34;&gt;How can it interest you?&lt;/h2&gt;

&lt;p&gt;There are many similar projects. But none of them combine both of the following features:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open source. You are free to fork it and modify it to meet your needs. You have a full control over your data. You can host your own copy anywhere you want.&lt;/li&gt;
&lt;li&gt;Both Android and web clients with synchronization.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some good alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.moneymanagerex.org&#34;&gt;Money Manager EX&lt;/a&gt; - a free, open-source, cross-platform personal finance software.  Unfortunately it doesn&amp;rsquo;t have a web client and DropBox is required for synchronization.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.andromoney.com&#34;&gt;AndroMoney&lt;/a&gt; - easy to use expense manager for Android, iOS and web.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;money-man-links:7cced0d4ebc37f80338282bff66da165&#34;&gt;Money Man links:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tolikcode/MoneyMan&#34;&gt;Sources on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://moneyman.azurewebsites.net/&#34;&gt;Running application in Azure&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Taking the trash out with PowerShell</title>
      <link>http://tolikcode.github.io/post/recycleBinPowerShell/</link>
      <pubDate>Sun, 15 Nov 2015 11:12:12 +0200</pubDate>
      
      <guid>http://tolikcode.github.io/post/recycleBinPowerShell/</guid>
      <description>

&lt;p&gt;Many Windows users tend to store all of their old unnecessary files in the Recycle Bin. However, it just irritates me to know that files I almost definitely won&amp;rsquo;t ever need are still taking space up on my hard drive. Immediately deleting these files bypassing the Recycle Bin is also not an option here.&lt;/p&gt;

&lt;h2 id=&#34;goal:9f7a0d51badf47810d72f2123425000b&#34;&gt;Goal&lt;/h2&gt;

&lt;p&gt;Recycle Bin should be something like a safety net in case of mistakenly deleted files and pretend it doesn&amp;rsquo;t even exist otherwise. Windows automatically empties your Recycle Bin when it reaches certain size limit. In my opinion there should be a time limit additionally to the size limit in the Recycle Bin.
There are third party applications that might help you with it. But people like me who are irritated by three month old files in their Recycle Bins are probably not going to be very happy with an application cluttering their computers just for this simple task. Fortunately you can do it with PowerShell.&lt;/p&gt;

&lt;h2 id=&#34;solution:9f7a0d51badf47810d72f2123425000b&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;After some googling I&amp;rsquo;ve found a detailed answer from &lt;code&gt;Indrek&lt;/code&gt; on &lt;a href=&#34;http://superuser.com/a/434673&#34;&gt;SuperUser&lt;/a&gt;. I liked the answer so much I decided to copy it here. It&amp;rsquo;s also a nice opportunity to learn a bit of PowerShell.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ForEach ($Drive in Get-PSDrive -PSProvider FileSystem) {
    $Path = $Drive.Name + &#39;:\$Recycle.Bin&#39;
    Get-ChildItem $Path -Force -Recurse -ErrorAction SilentlyContinue |
    Where-Object { $_.LastWriteTime -lt (Get-Date).AddDays(-30) } |
    Remove-Item -Recurse
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find a line-by-line explanation of this script in the original post from &lt;code&gt;Indrek&lt;/code&gt;. The script iterates over your disks, checks Recycle Bin folders and deletes all files that were put there more than some predefined period of time ago (in this case 30 days).&lt;/p&gt;

&lt;p&gt;Save this script as a text file with a &lt;code&gt;.ps1&lt;/code&gt; extension. You can then use Task Scheduler to run this at regular intervals. Open Task Scheduler and create a new task with the following parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Under the &amp;ldquo;General&amp;rdquo; tab, enter a name and check the &amp;ldquo;Run with highest privileges&amp;rdquo; option.&lt;/li&gt;
&lt;li&gt;Under the &amp;ldquo;Triggers&amp;rdquo; tab, add a new trigger and set the task to run daily.&lt;/li&gt;
&lt;li&gt;Under the &amp;ldquo;Actions&amp;rdquo; tab, add a new action:

&lt;ul&gt;
&lt;li&gt;set the &amp;ldquo;Program/script&amp;rdquo; field to &lt;code&gt;powershell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;set the &amp;ldquo;Add arguments&amp;rdquo; field to &lt;code&gt;-NonInteractive -NoProfile -ExecutionPolicy RemoteSigned -File &amp;quot;C:\path\to\script.ps1&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;ve been using this solution for several months already and it works like a charm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://tolikcode.github.io/about/</link>
      <pubDate>Sat, 07 Nov 2015 21:38:19 +0200</pubDate>
      
      <guid>http://tolikcode.github.io/about/</guid>
      <description>

&lt;p&gt;&lt;img class=&#34;aboutAvatar&#34; src=&#34;http://tolikcode.github.io/images/facebook-Storm-Trooper.jpg&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;hello:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Hello!&lt;/h2&gt;

&lt;p&gt;&lt;p/&gt;
My name is Anatoliy and this is my blog.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a .NET developer from Ukraine. Most of my experience is in desktop and mobile application development (Universal Applications, WPF, Windows Phone, MS SQL), although I&amp;rsquo;ve also worked with web and cloud technologies (WCF, Azure). Besides that I have a keen interest in other modern technologies. I expect myself to write about my findings in this blog.&lt;/p&gt;

&lt;p&gt;Email me at &lt;a href=&#34;mailto:tolikcode@gmail.com&#34;&gt;tolikcode@gmail.com&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logging in Universal Windows applications</title>
      <link>http://tolikcode.github.io/post/uwpLogging/</link>
      <pubDate>Sat, 24 Oct 2015 23:23:55 +0300</pubDate>
      
      <guid>http://tolikcode.github.io/post/uwpLogging/</guid>
      <description>

&lt;p&gt;As a Windows Phone developer I always envied Android developers with their quite handy out of the box logging solution, namely LogCat. It allows both to output debug information in real time and to write it somewhere permanently.&lt;/p&gt;

&lt;p&gt;With Windows 10 being released I was hoping to have something similar to Android LogCat in Windows. Alas, there are a few changes to ETW Tracing and that&amp;rsquo;s all. If your have a Windows Phone / Window 8 development experience there is going to be nothing new for you.&lt;/p&gt;

&lt;h2 id=&#34;etw-tracing:2856d4dc02b2154b98472d85debbb153&#34;&gt;ETW Tracing&lt;/h2&gt;

&lt;p&gt;The Microsoft way for logging in UWP applications is via &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa363668&#34;&gt;Event Tracing for Windows&lt;/a&gt;. You can find a corresponding sample from Microsoft on &lt;a href=&#34;https://github.com/Microsoft/Windows-universal-samples/tree/master/Samples/Logging&#34;&gt;GitHub&lt;/a&gt;. This technology has been around both in desktop and mobile versions of Windows for quite some time already.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;largeGreen&#34;&gt;+ &lt;/span&gt; Out of the box. No need to reference any additional libraries.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;largeGreen&#34;&gt;+ &lt;/span&gt; Semantic logging. Your logs are going to have a consistent structure that makes it easier to analyze them.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;largeRed&#34;&gt;- &lt;/span&gt; Requires an effort to configure.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;largeRed&#34;&gt;- &lt;/span&gt; By default the result is going to be &lt;code&gt;*.etl&lt;/code&gt; files that have to be decoded.&lt;/p&gt;

&lt;h2 id=&#34;metrolog:2856d4dc02b2154b98472d85debbb153&#34;&gt;MetroLog&lt;/h2&gt;

&lt;p&gt;There are many different third party libraries for logging in Universal applications. The most popular one is &lt;a href=&#34;https://www.nuget.org/packages/MetroLog/&#34;&gt;MetroLog&lt;/a&gt;. Log4net is a default logging solution in desktop applications for me. MetroLog is a log4net for Windows Universal applications.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;largeGreen&#34;&gt;+ &lt;/span&gt; Easy to configure.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;largeGreen&#34;&gt;+ &lt;/span&gt; Plain old text files. MetroLog can output to different targets, but it&amp;rsquo;s really easy to configure it to write everything into a &lt;code&gt;*.txt&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;span class=&#34;largeRed&#34;&gt;- &lt;/span&gt; Additional reference in your application.&lt;/p&gt;

&lt;h2 id=&#34;retrieving-logs-from-a-windows-phone:2856d4dc02b2154b98472d85debbb153&#34;&gt;Retrieving logs from a Windows phone&lt;/h2&gt;

&lt;p&gt;Whether you&amp;rsquo;re doing ETW tracing or using a third party library (or your own custom solution) you are going to need to retrieve your logs from a device. You can upload them to some server or just prompt users to email them directly to you. In case you have a physical access to a test device
the easiest and most convenient way is to use &lt;a href=&#34;https://wptools.codeplex.com&#34;&gt;Windows Phone Power Tools&lt;/a&gt;. I&amp;rsquo;ve tested it with Windows 10 Mobile Insider Preview and it works great.&lt;/p&gt;

&lt;h2 id=&#34;application-insights:2856d4dc02b2154b98472d85debbb153&#34;&gt;Application Insights&lt;/h2&gt;

&lt;p&gt;In Visual Studio 2015 Microsoft has added &lt;a href=&#34;https://azure.microsoft.com/en-us/services/application-insights/&#34;&gt;Application Insights&lt;/a&gt; into Universal App project template. Application Insights is a comprehensive application monitoring solution available in Azure cloud. It allows to monitor the availability, performance, and usage metrics of different applications and services, and it might help you to solve the problems you wanted to solve with logging.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hosting a Hugo generated site on GitHub</title>
      <link>http://tolikcode.github.io/post/hugoOnGitHub/</link>
      <pubDate>Sun, 04 Oct 2015 21:01:22 +0300</pubDate>
      
      <guid>http://tolikcode.github.io/post/hugoOnGitHub/</guid>
      <description>

&lt;p&gt;The reason I like Hugo so much is partly because of its great &lt;a href=&#34;http://gohugo.io/overview/introduction/&#34;&gt;documentation&lt;/a&gt;. Yet I do believe that  &lt;a href=&#34;http://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub&lt;/a&gt; tutorial can be improved a little. It contains some redundant information on how to create a blog with Hugo and focuses on GitHub &lt;em&gt;Project&lt;/em&gt; Pages for the most part. It does provide you with steps on how to host a personal blog on GitHub &lt;em&gt;User&lt;/em&gt; Pages, but this solution requires separate repositories for your blog&amp;rsquo;s source and generated static result. And with &lt;code&gt;git subtree&lt;/code&gt; you can do it in one GitHub repo. It took me some time to configure everything especially that I knew little about &lt;code&gt;git subtree&lt;/code&gt;. So I&amp;rsquo;ve decided to write my own article on GitHub publishing.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites:adf90425c55aea6c37dbfd72255f1e59&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;I assume that you are familiar with Git and have already generated a &lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Hugo website&lt;/a&gt;.
You are going to have something like this in your website&amp;rsquo;s directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;archetypes
content
data
layouts
public
static
themes
config.toml
README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;public&lt;/code&gt; folder contains your generated static website. I&amp;rsquo;ve also added &lt;code&gt;README.md&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;goal:adf90425c55aea6c37dbfd72255f1e59&#34;&gt;Goal&lt;/h2&gt;

&lt;p&gt;So you want to host your Hugo generated website on GitHub Pages. It&amp;rsquo;s natural to put your site&amp;rsquo;s sources in a GitHub repo too.
With &lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; you can just put everything in your &lt;code&gt;master&lt;/code&gt; branch and GitHub would handle everything else for you.
In the case of Hugo we need to do some additional work as GitHub requires your static website to be in the root of the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;The idea is to have the contents of &lt;code&gt;public&lt;/code&gt; folder on your &lt;code&gt;master&lt;/code&gt; branch, whereas other source files on some other orphan branch (e.g. &lt;code&gt;source&lt;/code&gt;). The &lt;code&gt;public&lt;/code&gt; folder on your &lt;code&gt;source&lt;/code&gt; branch is going to mirror the &lt;code&gt;master&lt;/code&gt; branch. This can be achieved with &lt;code&gt;git subtree&lt;/code&gt;. I encourage you to read more about &lt;code&gt;git subtree&lt;/code&gt;, however if you don&amp;rsquo;t feel like reading much today or just want to get results faster, here&amp;rsquo;s a tutorial for you.&lt;/p&gt;

&lt;h2 id=&#34;solution:adf90425c55aea6c37dbfd72255f1e59&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;I usually use &lt;a href=&#34;https://www.sourcetreeapp.com/&#34;&gt;SourceTree&lt;/a&gt; for most of my Git related work. Unfortunately SourceTree doesn&amp;rsquo;t work very well with &lt;a href=&#34;https://jira.atlassian.com/browse/SRCTREEWIN-1643&#34;&gt;Git&lt;/a&gt; &lt;a href=&#34;https://jira.atlassian.com/browse/SRCTREEWIN-1819&#34;&gt;subtrees&lt;/a&gt;. Don&amp;rsquo;t worry anyway. There are just a few commands you need to type in your terminal.&lt;/p&gt;

&lt;p&gt;Initialize the &lt;code&gt;master&lt;/code&gt; branch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Unstage all files
git rm -rf --cached .

git add README.md

git commit -m &amp;quot;Initial commit on master&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit everything to an orphan &lt;code&gt;source&lt;/code&gt; branch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout --orphan source

# Remove the public folder to make room for the master branch subtree
rm -rf public

git add .

git commit -m &amp;quot;Initial commit on source branch&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Push everything to GitHub:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git remote add origin https://github.com/tolikcode/tolikcode.github.io.

git push origin master

git push origin source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the most crucial command in this article. Add the &lt;code&gt;master&lt;/code&gt; branch as a &lt;code&gt;public&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git subtree add --prefix=public https://github.com/tolikcode/tolikcode.github.io.git master --squash
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;workflow:adf90425c55aea6c37dbfd72255f1e59&#34;&gt;Workflow&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s it! Your website is hosted on GitHub. Now your blogging workflow should be fairly simple. You just add new blogposts, edit templates, themes etc. Then you regenerate your website and commit everything to the &lt;code&gt;source&lt;/code&gt; branch:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo -t ThemeName
git add -A
git commit -m &amp;quot;Updating site&amp;quot; &amp;amp;&amp;amp; git push origin source
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have done everything correctly your Git commit history should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;center&#34; markdown=&#34;1&#34;&gt;
    &lt;img src=&#34;http://tolikcode.github.io/images/HugoOnGithubHistory.png&#34; alt=&#34;Git commit history&#34;&gt;
&lt;/div&gt;
&lt;p/&gt;&lt;/p&gt;

&lt;p&gt;When your changes are ready to see the world just publish them with &lt;code&gt;subtree push&lt;/code&gt; command to the &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git subtree push --prefix=public https://github.com/tolikcode/tolikcode.github.io.git master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can find your shiny new website at &lt;code&gt;http://yourusername.github.io/&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>